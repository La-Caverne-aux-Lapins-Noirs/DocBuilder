''''''''''''''''''''''''''''''''''''''
'Information sur l'activité elle-même'
''''''''''''''''''''''''''''''''''''''

' Ces fichiers peuvent être généré à la volée (pour les examens à la demande par exemple)
' Ou écrit à l'avance: c'est ainsi qu'on crée des nouveaux types d'activités.
' Une activité n'est pas un exercice mais une série d'exercices.
' Une activité peut tout à fait @inclure ou @insert des exercices d'ailleurs... c'est même recommandé.

' La langue de l'activité. L'emporte sur la langue de la configuration de DocBuilder mais perd face
' à une langue spécifiée dans la configuration de l'instance.
Language="FR"

' Le nom de la matière du sujet.
' Un exemple interessant d'utilisation de la directive @insert ou @include
' serait de faire @insert "graphic_programming.dab" par exemple. Par defaut il n'y a pas de logo.
' Peut-être un noeud dont les enfants seraient nommés d'après les langages.
Matter="Matter"
' Le logo de la matière du sujet.
MatterLogo="./res/matter_logo.png"
' Le logo de la matière en petit, pour les pieds ou tête de page.
SmallMatterLogo="./res/small_matter_logo.png"

' Le nom de l'activité courante. Peut-être un noeud dont les enfants seraient nommés d'après les langages
Activity="Activity"
' Le logo de l'activité
ActivityLogo="./res/activity_logo.png"
' Le logo de l'activité en petit pour les pieds ou bas de page
SmallActivityLogo="./res/small_activity_logo.png"

' Une phrase sous le logo d'activité pour introduire le sujet
' Peut-être un noeud dont les enfants seraient nommés d'après les langages. Optionnel.
FrontMessage="THE FRONT MESSAGE"

' L'auteur du document. Optionnel.
Author="Jason Brillante"
' Le numero de version. Ne pas utiliser de nombre decimaux. Optionnel.
Revision="1.0"
LastRevision="24/03/1989"

' La personne en charge de l'activité. Optionnel.
Manager="Jason Brillante"
' Le mail pour joindre le responsable. Optionnel.
Mail="Jason Brillante at home"

{Exercises
  [
    Type = "Builtin"
    Document = "./test/simple/markdown.md"
    Medals = "basic_line", "fixed_loop"
    [Name
      FR = "Premier chapitre"
      EN = "First chapter"
    ]
  ],
  [
    Type = "Function"
    [Document
      Prototype = "void lel(void)", "int get(int x, double r)"
      SideMark = "CE TEXTE EST SUR LE COTE"
      Description = [Text(abc)
        # Wesh

        Ce bloc est un bloc _litteral_ qui gère le *markdown*!
      abc]
    ]
    [Name
      FR = "chapitre deux"
      EN = "Second chapter"
    ]
  ],
  [
    Name = "e89_split"
    Type = "Function"
    Medals="function"
    [Document
      Prototype = "const char **e89_split(const char *str, char c)"
      Description = "Ceci est ", "la _description_!"
    ]
  ]
}
