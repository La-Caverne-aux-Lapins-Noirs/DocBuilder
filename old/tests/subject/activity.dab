
Type = "subject"

[Document
  FR = "Raiden"
  EN = "Raiden"
  Revision = "1.0"
  LastRevision = "24/03/1989"
  {Author
    [
      Name = "Jason Brillante"
      Mail = "jason.brillante@efrits.fr"
    ]
  }
]

[Matter
  FR = "Programmation graphique"
  EN = "Graphic programming"
  Code = "gfx"
  Logo = "./res/matter_logo.png"
  SmallLogo = "./res/small_matter_logo.png"
  {Teacher
    [
      Name = "Le Laboratoire aux Lapins Noirs"
      Mail = "lapinsnoirs@efrits.fr"
    ]
  }
]

[Activity
  FR = "Raiden"
  EN = "Raiden"
  Code = "raiden"
  Logo = "./res/activity_logo.png"
  SmallLogo = "./res/small_activity_logo.png"
  {Teacher
    [
      Name = "Jason Brillante"
      Mail = "jason.brillante@efrits.fr"
    ]
  }
]

[FrontPage
  [Message
    FR = "Dieu du tonnerre et des éclairs"
    EN = "God Of Thunder (And rock'n roll!)"
  ]
  [Description
    FR = "La description"
    EN = "The description"
  ]
]

{Exercises
  [
    Type = "Delivery"
    Critical = true
    [Name
      FR = "Livraison"
      EN = "Delivery"
    ]

    Medal = "delivery", "clean_repository", "dirty", "empty"

    'Ne changez pas cette ligne.
    [TeamSentence
      _FR = [].TeamSize[0] == [].TeamSize[1] ? string([].TeamSize[0]) : string([].TeamSize[0]) # " à " # string([].TeamSize[1])
      _EN = [].TeamSize[0] == [].TeamSize[1] ? string([].TeamSize[0]) # " people" : string([].TeamSize[0]) # " to " # string([].TeamSize[1]) # " people"
      FR = [].TeamSize[0] == 1 && [].TeamSize[1] == 1 ? "seul" : "en équipe de " # string(_FR)
      EN = [].TeamSize[0] == 1 && [].TeamSize[1] == 1 ? "alone" : "with a team of " # string(_EN)
    ]

    'Sera utilisé pour verifier la norme
    Files = "!*.c" '! signifiera recursivement
    Directory = "." 'Donc on a tous les fichiers .c à partir de la racine du dépot

    [Document
      ActivityType = "Exam" 'Peut être ré-écrit afin de passer en mode non examen.
      [ActivityTypes
        [Exam
          FR = "De plus, il s'agit d'un examen. Vous n'avez donc **pas** le droit de communiquer avec vos camarades."
          EN = "Also, this is an exam. You therefore have no right to communicate with your comrades."
        ]
        [Activity
          FR = "Vous pouvez bien sur échanger avec vos camarades, néanmoins vous devez être l'auteur·e de votre travail. Utiliser le code d'un autre, c'est **tricher**. Et tricher annule **toutes** les médailles que vous auriez pu recevoir de cette activité. La véficiation de la triche est réalisée de la même manière quel la correction : de manière **automatique**. Prenez garde si vous pensez pouvoir passer au travers"
          EN = "You can of course talk with your classmates, however you must be the author of your work. Using someone else's code is **cheating**. And cheating cancels **all** the medals you may have received from this activity. The verification of the cheat is carried out in the same way as the correction: **automatically**. Be careful if you think you can get through"
        ]
      ]
      FR = [Text($,EOF)
        $(SOL)Votre travail doit être rendu via $([].Delivery.Method) dans $([].Delivery.Target) avant le $([].Delivery.Date).

        %ALERT[
          L'évaluateur n'est pas capable de deviner où vous avez rendu. Si vous faites erreur et que le dossier que vous utiliser pour votre livraison est différent, vous ne serez **pas** évalué.
        %ALERT]

        $(SOL)Ce travail est à effectuer $(_._.TeamSentence[[].Language]). $(_.ActivityTypes[_.ActivityType][[].Language]).

        @@HLINE

        $(SOL)Votre rendu doit respecter **strictement** l'ensemble des règles suivantes:$(EOL)

        $(SOL)$(SOL)- Il ne doit contenir **aucun** fichier objet. (\*.o)$(EOL)
        $(SOL)$(SOL)- Il ne doit contenir **aucun** fichier tampon. (\*~, #\*#)$(EOL)
        $(SOL)$(SOL)- Il ne doit pas contenir votre production finale.$(EOL)

        %ALERT[
          La présence d'un fichier interdit mettra immédiatement fin à votre évaluation.
        %ALERT]

      EOF]
      EN = [Text($,EOF)
        Your work must be delivered through $([].Delivery.Method) in $([].Delivery.Target) before the $([].Delivery.Date).

        %ALERT[
          The evaluator cannot guess where you have delivered your work. If you do not deliver it precisly where it is requested, you will **not** be evaluated.
        %ALERT]

        This work must be done $(_._.TeamSentence[[].Language]). $(_.ActivityTypes[_.ActivityType][[].Language]).

        @@HLINE

        $(SOL)Your delivery must **stricly** respect the following rules:$(EOL)

        $(SOL)$(SOL)- It must not contains **any** object file. (*.o)$(EOL)
        $(SOL)$(SOL)- It must not contains **any** buffer file. (*~, #*#)$(EOL)
        $(SOL)$(SOL)- It must not contains your final production.$(EOL)

        %ALERT[
          The presence of a forbidden file will immediatly stop your evaluation.
        %ALERT]
      EOF]
    ]
  ],

  [
    Type = "AuthorizedFunctions" 'C'est un bloc Norm limité à la vérification des fonctions, globalement
    [Name
      FR = "Fonctions autorisées"
      EN = "Authorized Functions"
    ]
    Critical = true 'On s'arrete...
    NoEvaluation = true 'Pour qu'evaluator ne se lance pas (Parceque les exercices evaluent eux meme les fonction interdites, par exemple)

    'Sera utilisé pour verifier les fonctions
    Files = "!*.c" '! signifiera recursivement
    Directory = "." 'Donc on a tous les fichiers .c à partir de la racine du dépot
    Compile = "gcc -Wextra -Wall -c @FILES@ -o @OFILES "
    WonFunction = true
    Medal = "function_forbidden"
    [Function
      Authorized = "open", "close", "read", "write", "ioctl", "strlen", "strcpy", "malloc"
      Forbidden = "printf"
    ]
    [Norm
      '@insert "norm.dab"
    ]

    [Document
      FR = [Text($,EOF)
        $(SOL)Nous avons fait le choix de vous interdire l'utilisation des fonctions integrés à votre langage de programmation ou à votre système d'exploitation, à l'exception de celle que nous vous spécifions explicitement. Ce choix est motivé pédagogique: nous allons vous amener à découvrir ces fonctionnalités en vous les faisant reproduire, de sorte à ce qu'en plus de leur maîtrise, vous en compreniez le fonctionnement.

        %ALERT[
          L'utilisation d'une fonction interdite est assimilée à de la triche. La triche provoque l'arrêt de l'évaluation et la perte des médailles que vous auriez pu acquérir lors de cette activité.
        %ALERT]

        $(SOL)Vous avez le droit d'utiliser les fonctions dont nous vous reconnaissons la maîtrise. Lors
        des travaux de groupe, cette autorisation n'est donnée que si l'intégralité des équipiers
        disposent de cette autorisation.$(EOL)$(EOL)

        @@DEFINED_FUNCTIONS$(EOL)

        @@WON_FUNCTIONS$(EOL)
      EOF]
      EN = [Text($,EOF)
      EOF]
    ]
  ],

  [
    Type = "Norm"
    [Name
      FR = "Norme"
      EN = "Coding style"
    ]

    Medal = "sufficient_coding_style", "correct_coding_style", "perfect_coding_style", "bad_style"
    Files = "!*.c" '! signifiera recursivement
    Directory = "." 'Donc on a tous les fichiers .c à partir de la racine du dépot
    [Norm
      Describe = true
      'La description de la norme qui sera appliquée sur $Directory/$Files
      @insert "full_norm.dab"
    ]
    [Document
      FR = [Text($,EOF)
        $(SOL)Votre programme doit respecter la Table des Normes d'Efrits dans leur **integralité**.
        $(_._.Norm.Describe == false ? "Vous êtes invités à les observer depuis l'Infosphère." : "")
      EOF]
      EN = [Text($,EOF)
        $(SOL)Your program must respect the Tables Of Norm in their integrity.
        $(_._.Norm.Describe == false ? "You are invited to observe them on Infosphere." : "")
      EOF]
    ]
  ],
  [
    Type = "Function"
    Critical = false 'Indique si il faut arrêter la correction en cas de non réussite
    [Name
      FR = "Début"
      EN = "Beginning"
    ]

    [Document
      FR = [Text($,EOF)
        Programme la fonction ci-dessous.

        %CODE[
          int bonjour(int c);
        %CODE]

        %ALERT[Fais bien attention au nom de celle-ci!%ALERT]

        [img]res/ds9.png[/img]

        $(SOL)Ils sont beau, non?

      EOF]
      EN = [Text($,EOF)
      EOF]
    ]

    Directory = "." 'Si absent, par défaut, c'est .

    'Peut utiliser le globbing.
    Files = "bonjour.c" 'Les éléments à compiler
    Product = "bonjour.o" 'L'élément produit par la compilation
    Artefacts = "bonjour.bmp" 'Les éléments à ramasser, produit par l'execution du programme

    UserLibrary = true 'Faut il charger la bibliothèque utilisateur?
    Compile = "gcc -Wextra -Wall @FILES@ -o @PRODUCTS@ "
    Condition = "first_program" 'Correction et documents ne sont disponible que si ces médailles sont ok

    'Si ce bloc n'est pas défini, tout est autorisé sauf ce qui est interdit
    [Function
      Authorized = "open", "close", "read", "write"
      Forbidden = "printf"
    ]
    'Tout CCCrawler peut-être configuré ici. CCCrawler s'executes sur le tableau Files.
    [Norm
      Describe = true 'Indique qu'il faut générer la description de cette norme dans le document
      @insert "bonjour_specific_norm.dab"
    ]

    'Tout Evaluator peut-être configuré ici. Evaluator s'execute sur le tableau Files.
    {Evaluation
      [
        Robot = "/opt/technocore/c/bonjour.so"
        Timeout = 2

        Evaluator = "evaluate_bonjour"
        Function = "bonjour"
        Test = "test_bonjour"

        [Evaluation
          Mandatory = true
          Medal = "function", "condition"
        ]
        [FullEvaluation
          Mandatory = true
          Medal = "corner_case"
        ]
        [DefensiveProgramming
          Mandatory = false
          Medal = "defensive"
        ]
        [ReportError
          Mandatory = true
          Medal = "return_value"
        ]
        [UseErrno
          Mandatory = false
          Medal = "einval"
        ]
        [Test
          Mandatory = true
          Medal = "simple_check"
        ]
        [FullTest
          Mandatory = true
          Medal = "full_check"
        ]
        [DefensiveTesting
          Mandatory = false
          Medal = "stupid_check"
        ]
        [ErrorTesting
          Mandatory = true
          Medal = "good_check"
        ]
        [ErrnoTesting
          Mandatory = true
          Medal = "complete_check"
        ]
        MaximumPerfRatio = 2
        MaximumRamRatio = 2
        Complexity(int n):int = n
      ]
    }
  ]
}
